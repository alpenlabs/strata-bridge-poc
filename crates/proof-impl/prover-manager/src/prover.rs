use anyhow::Context;
use sp1_sdk::{ProverClient, SP1ProofWithPublicValues, SP1VerifyingKey};
use strata_bridge_guest_builder::GUEST_BRIDGE_ELF;
use strata_sp1_adapter::SP1ProofInputBuilder;
use strata_zkvm::{Proof, ZKVMInputBuilder};

pub fn get_data() -> Vec<u8> {
    let ser_data: Vec<u8> = vec![
        20, 217, 32, 60, 114, 201, 136, 188, 68, 22, 156, 94, 223, 111, 207, 197, 155, 22, 139,
        127, 78, 81, 20, 133, 152, 175, 89, 233, 112, 22, 11, 227, 68, 186, 73, 207, 19, 81, 220,
        110, 219, 140, 15, 82, 20, 27, 18, 118, 40, 83, 41, 63, 252, 57, 31, 8, 92, 54, 83, 42, 96,
        252, 243, 249, 13, 83, 20, 145, 98, 163, 12, 16, 200, 44, 194, 165, 62, 9, 68, 242, 223,
        251, 97, 118, 11, 4, 126, 84, 20, 0, 220, 104, 253, 159, 253, 58, 16, 187, 142, 69, 11, 7,
        195, 84, 185, 67, 127, 23, 156, 85, 20, 225, 249, 169, 136, 187, 100, 147, 59, 221, 220,
        64, 142, 225, 47, 149, 145, 145, 153, 97, 191, 86, 20, 20, 116, 170, 179, 89, 165, 253,
        150, 30, 174, 54, 28, 116, 47, 111, 119, 254, 243, 48, 242, 87, 20, 94, 8, 212, 189, 92,
        214, 87, 6, 237, 104, 227, 43, 147, 139, 106, 85, 196, 73, 167, 154, 88, 20, 14, 179, 67,
        13, 7, 159, 153, 194, 209, 59, 60, 81, 101, 102, 2, 85, 81, 9, 164, 64, 85, 20, 202, 48,
        16, 232, 112, 196, 116, 124, 167, 244, 220, 134, 139, 237, 239, 242, 62, 163, 100, 191, 84,
        20, 217, 32, 60, 114, 201, 136, 188, 68, 22, 156, 94, 223, 111, 207, 197, 155, 22, 139,
        127, 78, 81, 20, 83, 216, 202, 246, 75, 9, 164, 186, 210, 254, 75, 138, 71, 161, 86, 181,
        174, 20, 131, 0, 95, 20, 198, 78, 21, 234, 240, 93, 197, 19, 234, 44, 36, 4, 186, 57, 243,
        200, 141, 134, 207, 80, 81, 20, 233, 246, 213, 118, 95, 20, 209, 68, 84, 67, 172, 77, 18,
        199, 194, 201, 130, 183, 149, 253, 94, 20, 216, 152, 119, 123, 194, 135, 152, 152, 133,
        139, 127, 142, 73, 23, 66, 255, 34, 119, 250, 209, 81, 20, 244, 195, 147, 25, 63, 11, 15,
        27, 120, 74, 123, 166, 238, 212, 231, 7, 21, 176, 171, 5, 93, 20, 102, 102, 20, 183, 165,
        197, 101, 79, 51, 202, 115, 133, 0, 188, 4, 121, 35, 252, 116, 50, 81, 20, 39, 135, 166,
        61, 243, 126, 248, 24, 15, 248, 38, 180, 123, 68, 68, 184, 119, 150, 122, 89, 92, 20, 52,
        26, 24, 185, 239, 243, 22, 86, 99, 229, 168, 170, 227, 98, 18, 125, 170, 49, 36, 177, 81,
        20, 130, 80, 57, 63, 241, 108, 57, 204, 87, 97, 255, 199, 184, 4, 203, 68, 1, 162, 154, 22,
        91, 20, 230, 2, 166, 47, 204, 62, 189, 84, 106, 237, 86, 227, 150, 197, 14, 212, 36, 161,
        110, 76, 81, 20, 174, 190, 117, 10, 16, 184, 222, 221, 133, 124, 86, 148, 58, 168, 17, 70,
        129, 136, 95, 41, 90, 20, 127, 57, 10, 114, 31, 59, 150, 55, 228, 9, 30, 172, 76, 1, 13,
        240, 195, 108, 125, 244, 81, 20, 209, 17, 134, 139, 11, 193, 150, 114, 143, 205, 93, 181,
        233, 44, 164, 70, 180, 224, 232, 251, 89, 20, 223, 216, 170, 252, 48, 88, 171, 120, 82,
        239, 250, 149, 44, 107, 248, 110, 42, 200, 77, 96, 81, 20, 120, 13, 43, 11, 129, 138, 109,
        55, 189, 200, 54, 188, 93, 198, 210, 41, 247, 177, 45, 81, 88, 20, 45, 151, 168, 55, 182,
        193, 243, 105, 187, 191, 228, 142, 111, 167, 251, 60, 105, 77, 131, 155, 81, 20, 23, 110,
        125, 73, 238, 31, 134, 48, 201, 14, 84, 38, 183, 65, 144, 147, 126, 75, 130, 66, 87, 20,
        211, 40, 251, 253, 129, 5, 41, 34, 174, 107, 225, 210, 12, 111, 220, 122, 240, 111, 15,
        245, 81, 20, 209, 187, 63, 27, 228, 166, 221, 208, 169, 85, 182, 222, 123, 89, 82, 241, 43,
        195, 147, 199, 86, 20, 111, 205, 207, 220, 208, 143, 25, 142, 202, 41, 137, 13, 52, 200,
        150, 86, 37, 173, 116, 159, 81, 20, 211, 52, 141, 190, 248, 82, 70, 224, 35, 98, 116, 19,
        238, 221, 212, 88, 157, 61, 117, 226, 85, 20, 2, 178, 164, 64, 9, 60, 146, 5, 126, 199,
        102, 210, 67, 141, 188, 198, 89, 192, 196, 185, 81, 20, 118, 252, 47, 114, 174, 166, 187,
        62, 113, 116, 82, 110, 178, 182, 44, 97, 193, 80, 86, 129, 84, 20, 225, 94, 123, 110, 201,
        197, 150, 190, 85, 114, 191, 150, 105, 102, 242, 223, 97, 85, 133, 198, 81, 20, 241, 23,
        132, 248, 250, 227, 185, 168, 48, 183, 31, 70, 158, 92, 229, 110, 5, 52, 170, 227, 83, 20,
        95, 207, 72, 176, 147, 177, 57, 7, 211, 221, 226, 190, 92, 225, 200, 86, 231, 227, 215,
        106, 81, 20, 210, 200, 107, 90, 226, 136, 203, 246, 208, 234, 164, 20, 226, 243, 200, 161,
        8, 209, 161, 143, 82, 20, 120, 168, 19, 235, 117, 241, 8, 169, 33, 100, 132, 176, 224, 131,
        198, 20, 111, 136, 72, 31, 81, 20, 12, 245, 228, 131, 36, 241, 223, 53, 175, 239, 209, 214,
        129, 47, 141, 218, 176, 174, 106, 241, 81, 20, 55, 1, 156, 217, 173, 37, 232, 36, 29, 185,
        230, 243, 229, 141, 150, 45, 147, 246, 209, 86, 81, 20, 108, 15, 159, 120, 144, 129, 40, 1,
        22, 64, 41, 144, 22, 183, 17, 120, 210, 91, 152, 182, 0, 20, 240, 145, 69, 130, 32, 59,
        255, 255, 113, 132, 27, 199, 251, 80, 68, 157, 6, 105, 183, 30, 0, 20, 112, 154, 129, 60,
        108, 128, 214, 61, 135, 113, 95, 148, 130, 17, 157, 22, 125, 110, 123, 122, 95, 20, 127,
        235, 9, 11, 187, 158, 171, 165, 118, 87, 211, 47, 76, 205, 238, 93, 7, 52, 132, 227, 0, 20,
        42, 219, 81, 180, 122, 130, 184, 140, 217, 140, 143, 62, 120, 227, 129, 220, 198, 55, 77,
        183, 94, 20, 216, 127, 218, 182, 242, 137, 126, 20, 170, 21, 43, 100, 181, 220, 55, 251,
        55, 197, 3, 114, 0, 20, 233, 154, 163, 113, 116, 233, 158, 87, 106, 185, 19, 118, 145, 189,
        61, 3, 223, 128, 152, 83, 93, 20, 127, 210, 69, 35, 114, 1, 2, 233, 55, 117, 141, 141, 229,
        3, 84, 59, 112, 107, 178, 15, 0, 20, 143, 215, 126, 218, 34, 123, 72, 160, 213, 144, 2, 38,
        100, 55, 76, 47, 124, 33, 193, 169, 92, 20, 39, 91, 38, 21, 73, 112, 185, 14, 5, 248, 213,
        204, 63, 77, 128, 225, 205, 206, 24, 104, 0, 20, 71, 131, 144, 202, 118, 10, 164, 143, 8,
        116, 63, 64, 39, 171, 197, 237, 227, 20, 55, 181, 91, 20, 88, 14, 228, 104, 13, 57, 164,
        133, 92, 205, 187, 3, 35, 179, 245, 33, 233, 4, 189, 170, 0, 20, 64, 246, 234, 197, 153,
        112, 65, 242, 95, 69, 173, 133, 35, 196, 4, 193, 229, 244, 176, 99, 90, 20, 54, 17, 107,
        34, 187, 186, 106, 47, 60, 171, 19, 33, 80, 7, 73, 199, 46, 161, 19, 65, 0, 20, 113, 103,
        99, 32, 91, 40, 25, 173, 181, 160, 9, 225, 91, 164, 212, 5, 175, 165, 120, 78, 89, 20, 146,
        248, 31, 134, 86, 115, 173, 102, 203, 242, 105, 174, 160, 164, 2, 171, 5, 165, 198, 217, 0,
        20, 102, 1, 207, 207, 152, 35, 104, 150, 137, 150, 36, 188, 43, 210, 17, 184, 224, 55, 53,
        114, 88, 20, 54, 52, 190, 220, 25, 148, 43, 165, 183, 55, 215, 164, 19, 210, 2, 48, 99, 5,
        99, 212, 0, 20, 131, 169, 147, 13, 102, 45, 120, 229, 69, 53, 198, 6, 237, 117, 148, 50,
        125, 157, 13, 95, 87, 20, 202, 175, 15, 240, 118, 126, 118, 78, 255, 34, 188, 55, 41, 249,
        95, 122, 99, 1, 225, 171, 0, 20, 172, 28, 2, 174, 204, 202, 237, 71, 69, 215, 92, 193, 243,
        67, 103, 144, 251, 119, 211, 217, 86, 20, 70, 199, 229, 173, 183, 126, 123, 98, 34, 22,
        159, 238, 200, 157, 191, 158, 156, 6, 254, 48, 0, 20, 90, 115, 104, 112, 85, 216, 223, 33,
        130, 241, 196, 5, 111, 139, 206, 68, 164, 54, 154, 76, 85, 20, 185, 172, 145, 218, 50, 184,
        8, 78, 0, 235, 142, 162, 160, 205, 128, 139, 216, 133, 48, 1, 0, 20, 63, 231, 227, 239,
        178, 63, 220, 148, 37, 79, 192, 42, 198, 98, 48, 62, 46, 8, 23, 175, 84, 20, 151, 201, 89,
        242, 142, 93, 194, 190, 147, 50, 26, 100, 22, 76, 227, 68, 23, 133, 148, 117, 0, 20, 179,
        234, 70, 122, 155, 206, 209, 228, 199, 91, 21, 129, 147, 153, 2, 162, 128, 140, 119, 211,
        83, 20, 213, 63, 170, 128, 69, 248, 89, 207, 69, 115, 47, 205, 212, 49, 165, 132, 254, 44,
        131, 216, 0, 20, 82, 229, 119, 109, 137, 231, 232, 37, 203, 107, 243, 22, 84, 214, 7, 222,
        17, 142, 38, 149, 82, 20, 200, 193, 130, 243, 171, 6, 184, 148, 114, 96, 109, 189, 12, 217,
        24, 243, 40, 203, 78, 190, 0, 20, 126, 232, 84, 207, 209, 223, 182, 69, 113, 75, 111, 7,
        179, 254, 44, 18, 66, 63, 19, 71, 81, 20, 19, 55, 80, 75, 115, 57, 6, 219, 70, 152, 107,
        60, 118, 21, 175, 119, 222, 112, 98, 178, 0, 20, 84, 90, 220, 255, 81, 249, 166, 35, 107,
        158, 217, 188, 3, 191, 25, 249, 35, 249, 237, 112, 0, 20, 237, 166, 239, 214, 12, 224, 3,
        23, 99, 122, 26, 186, 224, 30, 13, 72, 251, 162, 239, 149, 82, 20, 203, 233, 183, 66, 44,
        122, 19, 195, 54, 233, 215, 26, 6, 3, 97, 141, 66, 242, 47, 128, 92, 20, 81, 44, 64, 250,
        103, 23, 190, 170, 77, 218, 173, 83, 228, 125, 144, 136, 30, 172, 52, 249, 0,
    ];

    ser_data
}

pub fn make_proof() -> anyhow::Result<(SP1ProofWithPublicValues, SP1VerifyingKey, Proof)> {
    let mut input_builder = SP1ProofInputBuilder::new();
    input_builder.write_serialized(&get_data()).unwrap();
    let input = input_builder.build()?;

    let prover_client = ProverClient::new();
    let (proving_key, vkey) = prover_client.setup(GUEST_BRIDGE_ELF);

    let prover = prover_client.prove(&proving_key, input);
    // .compressed()
    // .groth16();

    let proof = prover.run()?;

    let sp1_groth16_proof_bytes = hex::decode(
        &proof
            .clone()
            .proof
            .try_as_groth_16()
            .context("Failed to convert proof to Groth16")?
            .raw_proof,
    )
    .context("Failed to decode Groth16 proof")?;
    anyhow::Ok((proof, vkey, Proof::new(sp1_groth16_proof_bytes)))
}

#[cfg(test)]
mod test {
    use std::{
        fs::File,
        io::{self, Write},
    };

    use super::*;

    #[test]
    fn test_proof_generation_and_save() {
        let proof_res = make_proof().unwrap();
        let proof_res = bincode::serialize(&proof_res).unwrap();
        save_to_bin_file(proof_res, "proof.bin").unwrap();
    }

    fn save_to_bin_file(data: Vec<u8>, file_path: &str) -> io::Result<()> {
        let mut file = File::create(file_path)?; // Open or create the file
        file.write_all(&data)?; // Write the entire byte vector to the file
        Ok(())
    }
}
