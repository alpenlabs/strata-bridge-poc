use bitcoin::block::Header;
use strata_btcio::{
    reader::query::get_verification_state,
    rpc::{traits::Reader, BitcoinClient},
};
use strata_primitives::{buf::Buf32, l1::OutputRef};
use strata_state::{
    block::L2Block,
    chain_state::ChainState,
    l1::{compute_block_hash, get_btc_params, HeaderVerificationState},
};

pub fn get_bitcoin_client() -> BitcoinClient {
    BitcoinClient::new(
        "http://127.0.0.1:18443".to_string(),
        "rpcuser".to_string(),
        "rpcpassword".to_string(),
    )
    .expect("failed to connect to the btc client")
}

pub fn get_chain_state() -> (ChainState, OutputRef) {
    let witness_buf: Vec<u8> = vec![
        32, 137, 42, 61, 58, 136, 244, 114, 107, 2, 228, 177, 203, 30, 117, 159, 67, 206, 61, 8,
        217, 133, 194, 234, 221, 60, 216, 5, 138, 64, 235, 221, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 129, 202, 55, 181, 56, 177, 116, 240, 100, 230, 236,
        154, 153, 14, 189, 88, 133, 151, 158, 57, 87, 153, 85, 239, 246, 203, 22, 233, 113, 223,
        243, 101, 80, 0, 0, 0, 0, 0, 0, 32, 176, 83, 55, 22, 111, 50, 196, 218, 234, 127, 7, 0,
        153, 160, 106, 142, 222, 136, 8, 60, 46, 205, 37, 70, 227, 23, 208, 18, 98, 76, 100, 10,
        38, 13, 35, 242, 226, 96, 133, 48, 188, 63, 242, 64, 43, 254, 182, 108, 124, 185, 23, 244,
        247, 244, 20, 15, 110, 38, 120, 6, 174, 45, 71, 28, 86, 184, 44, 103, 255, 255, 127, 32, 1,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 9, 3, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 184, 255, 103, 188, 205, 226, 195, 21,
        18, 117, 76, 86, 22, 43, 65, 190, 172, 162, 1, 107, 3, 209, 193, 233, 164, 249, 153, 28,
        64, 203, 229, 39, 80, 0, 0, 0, 0, 0, 0, 32, 129, 202, 55, 181, 56, 177, 116, 240, 100, 230,
        236, 154, 153, 14, 189, 88, 133, 151, 158, 57, 87, 153, 85, 239, 246, 203, 22, 233, 113,
        223, 243, 101, 23, 117, 167, 49, 114, 52, 206, 223, 231, 187, 117, 66, 98, 128, 65, 233,
        149, 222, 147, 77, 116, 64, 166, 187, 235, 187, 11, 8, 129, 17, 76, 66, 86, 184, 44, 103,
        255, 255, 127, 32, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 149, 4, 69, 222, 197, 35, 104,
        80, 217, 11, 174, 76, 137, 74, 186, 63, 246, 184, 1, 73, 46, 117, 187, 144, 160, 211, 49,
        24, 11, 69, 247, 77, 80, 0, 0, 0, 0, 0, 0, 32, 184, 255, 103, 188, 205, 226, 195, 21, 18,
        117, 76, 86, 22, 43, 65, 190, 172, 162, 1, 107, 3, 209, 193, 233, 164, 249, 153, 28, 64,
        203, 229, 39, 192, 127, 234, 114, 187, 147, 158, 147, 198, 167, 58, 216, 1, 53, 237, 242,
        107, 148, 40, 66, 64, 158, 133, 47, 229, 212, 143, 20, 148, 58, 6, 177, 86, 184, 44, 103,
        255, 255, 127, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 187, 46, 47, 15, 85, 131, 5,
        62, 108, 127, 141, 77, 228, 129, 253, 58, 27, 60, 239, 218, 117, 238, 63, 64, 221, 104,
        213, 8, 174, 170, 118, 68, 80, 0, 0, 0, 0, 0, 0, 32, 149, 4, 69, 222, 197, 35, 104, 80,
        217, 11, 174, 76, 137, 74, 186, 63, 246, 184, 1, 73, 46, 117, 187, 144, 160, 211, 49, 24,
        11, 69, 247, 77, 160, 53, 80, 237, 13, 3, 34, 216, 181, 236, 65, 252, 16, 222, 105, 179,
        102, 66, 31, 152, 24, 146, 7, 27, 148, 107, 8, 158, 155, 248, 242, 107, 86, 184, 44, 103,
        255, 255, 127, 32, 0, 0, 0, 0, 193, 142, 124, 59, 51, 118, 120, 14, 4, 145, 78, 231, 227,
        192, 141, 255, 223, 227, 65, 47, 219, 168, 39, 38, 245, 151, 95, 126, 204, 241, 189, 231,
        0, 0, 0, 0, 0, 0, 0, 0, 156, 41, 36, 231, 229, 16, 105, 234, 146, 61, 176, 35, 4, 98, 53,
        126, 232, 224, 216, 182, 227, 140, 62, 32, 192, 75, 241, 59, 111, 131, 104, 127, 80, 0, 0,
        0, 0, 0, 0, 32, 187, 46, 47, 15, 85, 131, 5, 62, 108, 127, 141, 77, 228, 129, 253, 58, 27,
        60, 239, 218, 117, 238, 63, 64, 221, 104, 213, 8, 174, 170, 118, 68, 12, 86, 169, 254, 131,
        209, 52, 192, 223, 229, 221, 220, 122, 94, 81, 194, 182, 18, 106, 50, 89, 182, 22, 3, 26,
        229, 139, 68, 71, 85, 224, 109, 86, 184, 44, 103, 255, 255, 127, 32, 3, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32,
        0, 0, 0, 55, 173, 97, 207, 241, 54, 116, 103, 169, 140, 247, 197, 76, 74, 201, 158, 152,
        159, 31, 187, 27, 193, 230, 70, 35, 94, 144, 192, 101, 197, 101, 186, 0, 0, 0, 0, 53, 23,
        20, 175, 114, 215, 66, 89, 244, 92, 215, 234, 176, 176, 69, 39, 205, 64, 231, 72, 54, 164,
        90, 188, 174, 80, 249, 45, 145, 157, 152, 143, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 141, 134, 131,
        78, 111, 219, 69, 186, 107, 127, 253, 6, 122, 39, 185, 225, 214, 119, 120, 4, 117, 129,
        215, 239, 117, 126, 217, 224, 250, 71, 64, 0, 214, 120, 170, 42, 213, 228, 242, 23, 64, 37,
        170, 127, 119, 205, 67, 238, 102, 44, 205, 148, 73, 153, 130, 208, 195, 34, 167, 61, 31,
        254, 205, 121, 1, 0, 0, 0, 10, 187, 0, 184, 177, 126, 39, 152, 221, 235, 208, 204, 187,
        133, 139, 111, 98, 74, 31, 247, 217, 62, 193, 91, 170, 138, 123, 227, 241, 54, 71, 77, 23,
        92, 178, 109, 239, 0, 234, 239, 64, 101, 12, 157, 97, 27, 230, 117, 15, 181, 119, 161, 12,
        225, 248, 248, 94, 43, 40, 195, 70, 219, 137, 246, 2, 0, 0, 0, 42, 75, 116, 61, 194, 57,
        58, 110, 224, 56, 53, 10, 110, 243, 165, 87, 65, 230, 199, 138, 198, 73, 20, 120, 216, 50,
        244, 226, 162, 58, 166, 190, 1, 164, 160, 232, 209, 174, 75, 16, 184, 220, 35, 13, 92, 51,
        14, 72, 148, 5, 135, 153, 139, 148, 247, 106, 94, 46, 115, 209, 68, 77, 74, 251, 2, 0, 0,
        0, 2, 0, 0, 0, 0, 0, 0, 0, 85, 208, 248, 235, 145, 224, 87, 101, 67, 52, 148, 244, 56, 170,
        155, 111, 123, 149, 138, 150, 157, 149, 75, 3, 207, 109, 25, 190, 163, 203, 121, 234, 0, 0,
        0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 202, 154, 59, 0, 0, 0, 0, 0, 0, 0,
        0, 2, 1, 0, 0, 0, 180, 9, 152, 16, 178, 130, 129, 148, 12, 9, 145, 227, 255, 185, 118, 253,
        20, 118, 249, 143, 230, 23, 13, 148, 99, 68, 94, 53, 240, 1, 144, 118, 0, 202, 154, 59, 0,
        0, 0, 0, 2, 0, 0, 0, 67, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 118, 170, 186, 205, 99, 18, 81,
        138, 99, 247, 254, 224, 247, 131, 6, 2, 13, 215, 117, 64, 169, 21, 139, 7, 209, 203, 181,
        87, 222, 51, 32, 120, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 202,
        154, 59, 0, 0, 0, 0, 0, 0, 0, 0, 1, 29, 0, 0, 0, 0, 0, 0, 0, 70, 142, 174, 6, 147, 1, 0, 0,
        32, 137, 42, 61, 58, 136, 244, 114, 107, 2, 228, 177, 203, 30, 117, 159, 67, 206, 61, 8,
        217, 133, 194, 234, 221, 60, 216, 5, 138, 64, 235, 221, 217, 135, 178, 143, 158, 37, 147,
        90, 28, 110, 141, 208, 240, 187, 247, 144, 108, 13, 179, 246, 83, 220, 189, 118, 122, 149,
        64, 222, 126, 200, 41, 23, 191, 26, 50, 209, 22, 236, 11, 230, 227, 93, 135, 147, 60, 2,
        79, 8, 185, 70, 27, 38, 59, 93, 23, 195, 42, 32, 202, 17, 19, 239, 187, 149, 176, 89, 71,
        54, 14, 88, 40, 185, 144, 250, 37, 51, 73, 56, 150, 213, 208, 50, 5, 75, 225, 76, 146, 3,
        182, 234, 10, 227, 105, 136, 100, 23, 24, 164, 239, 16, 25, 8, 31, 30, 61, 15, 110, 17,
        139, 207, 60, 60, 69, 120, 114, 250, 100, 182, 45, 5, 7, 193, 173, 146, 175, 111, 130, 97,
        202, 183, 43, 14, 152, 106, 132, 44, 58, 212, 171, 202, 1, 214, 178, 156, 112, 249, 222,
        237, 92, 20, 77, 59, 119, 56, 77, 160, 44, 107, 252, 41, 2, 0, 0, 0, 13, 3, 0, 0, 0, 0, 0,
        0, 38, 126, 151, 243, 65, 197, 109, 61, 81, 59, 143, 12, 254, 252, 102, 42, 87, 75, 18,
        131, 130, 49, 142, 42, 203, 107, 95, 217, 201, 18, 48, 86, 80, 0, 0, 0, 0, 0, 0, 32, 156,
        41, 36, 231, 229, 16, 105, 234, 146, 61, 176, 35, 4, 98, 53, 126, 232, 224, 216, 182, 227,
        140, 62, 32, 192, 75, 241, 59, 111, 131, 104, 127, 119, 196, 194, 255, 47, 119, 129, 118,
        79, 172, 144, 101, 32, 39, 17, 58, 134, 33, 143, 179, 123, 45, 249, 9, 207, 151, 75, 102,
        113, 5, 190, 151, 86, 184, 44, 103, 255, 255, 127, 32, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 14, 3, 0, 0, 0, 0, 0, 0, 61, 23, 121, 85, 48, 128, 79, 91, 221, 81, 118, 72, 214, 54,
        103, 132, 236, 118, 187, 51, 227, 207, 250, 144, 187, 168, 173, 71, 46, 210, 213, 96, 80,
        0, 0, 0, 0, 0, 0, 32, 38, 126, 151, 243, 65, 197, 109, 61, 81, 59, 143, 12, 254, 252, 102,
        42, 87, 75, 18, 131, 130, 49, 142, 42, 203, 107, 95, 217, 201, 18, 48, 86, 156, 184, 29,
        246, 147, 34, 1, 189, 244, 244, 61, 154, 208, 231, 113, 112, 67, 50, 0, 101, 165, 177, 228,
        49, 170, 139, 172, 206, 3, 220, 44, 41, 87, 184, 44, 103, 255, 255, 127, 32, 2, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 86, 232, 31, 23, 27, 204, 85, 166, 255,
        131, 69, 230, 146, 192, 248, 110, 91, 72, 224, 27, 153, 108, 173, 192, 1, 98, 47, 181, 227,
        99, 180, 33, 32, 0, 0, 0, 31, 194, 186, 227, 20, 179, 44, 95, 249, 148, 108, 124, 69, 71,
        106, 110, 84, 26, 36, 128, 31, 20, 219, 93, 202, 169, 25, 111, 203, 135, 150, 192, 0, 0, 0,
        0, 141, 180, 169, 163, 38, 229, 127, 134, 20, 138, 55, 216, 173, 109, 169, 38, 111, 43, 55,
        65, 89, 130, 123, 251, 42, 158, 160, 206, 68, 219, 169, 39, 0, 0, 0, 0, 0, 0, 0, 0,
    ];

    let (chain_state, _): (ChainState, L2Block) = borsh::from_slice(&witness_buf).unwrap();

    // Get the output ref
    let deposit_idx = 0;
    let deposit_entry = chain_state
        .deposits_table()
        .get_deposit(deposit_idx)
        .unwrap();
    let output_ref = deposit_entry.output().clone();

    (chain_state, output_ref)
}

pub async fn get_header_verification_data(
    start_block: u64,
    end_block: u64,
    genesis_block_num: u64,
) -> (HeaderVerificationState, Vec<Header>) {
    let btc_client = get_bitcoin_client();
    let params = get_btc_params();

    let block_hvs = get_verification_state(&btc_client, start_block, genesis_block_num, &params)
        .await
        .unwrap();

    let mut headers: Vec<Header> = Vec::new();
    for block_num in start_block..=end_block {
        let block = btc_client.get_block_at(block_num).await.unwrap();
        let header = block.header;
        headers.push(header);
    }

    (block_hvs, headers)
}

pub async fn get_checkpoint_data() {}

async fn get_block_header(height: u64, client: &BitcoinClient) -> Header {
    client.get_block_at(height).await.unwrap().header
}

async fn get_block_header_hash(height: u64, client: &BitcoinClient) -> Buf32 {
    compute_block_hash(&get_block_header(height, client).await)
}

pub async fn get_block_headers_hash(heights: Vec<u64>, client: &BitcoinClient) -> Vec<Buf32> {
    let mut header_hashes: Vec<Buf32> = Vec::new();
    for block_num in heights {
        header_hashes.push(get_block_header_hash(block_num, client).await);
    }
    header_hashes
}
